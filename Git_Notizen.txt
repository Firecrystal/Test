
git subtrees: http://git-scm.com/book/de/Git-Tools-Subtree-Merging

git bundles: http://git-scm.com/2010/03/10/bundles.html

create a bundle: (http://stackoverflow.com/questions/3635952/how-to-use-git-bundle-for-keeping-development-in-sync)

git bundle create /home/tom/ibosszentral/iBOSS-2/ibosssim/tom.bundle --branches --tags


workflows: http://git-scm.com/book/en/Distributed-Git-Distributed-Workflows

gitolite server: http://sitaramc.github.com/gitolite/how.html

http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging

git & webdav: http://blog.mro.name/2008/10/git-repo-auf-webdav-11/

split projects: http://stackoverflow.com/questions/359424/detach-subdirectory-into-separate-git-repository

convert subfolder to submodule: http://willandorla.com/will/2011/01/convert-folder-into-git-submodule

sshfs Meschede@wega:/host/dir/to/mount ~/Desktop/sftp

init git central repository:

git init --bare //Path/to/Central.git

git remote add Central //Path/to/Central.git

git push --all Central


git password problems:
https://github.com/pah/git-credential-helper

git & ftps: https://github.com/resmo/git-ftp

git ftp init -u Meschede -p - sftp://wega.fb12.tu-berlin.de/iBOSS-2/ibosssim/

#git init ftps://wega.fb12.tu-berlin.de/iBOSS-2/iboss_sim/

git ftp push -u Meschede -p - sftp://wega.fb12.tu-berlin.de/iBOSS-2/ibosssim/


git clone ftps://wega.fb12.tu-berlin.de/iBOSS-2/iboss_sim/


results in:

GIT URLS

       In general, URLs contain information about the transport protocol, the address of the remote server, and the path to the repository.

       Depending on the transport protocol, some of this information may be absent.


       Git natively supports ssh, git, http, https, ftp, ftps, and rsync protocols. The following syntaxes may be used with them:


       ·   ssh://[user@]host.xz[:port]/path/to/repo.git/


       ·   git://host.xz[:port]/path/to/repo.git/


       ·   http[s]://host.xz[:port]/path/to/repo.git/


       ·   ftp[s]://host.xz[:port]/path/to/repo.git/

FTPS seems to be one of the allowed protocols.

ftps: ftps://host.xz[:port]/path/to/repo.git/

to get another repository:

git clone <remote repository>  #get repository

git push #push commits to remote repository

git pull #pull changes from remote repository

git config --bool core.bare true #convert a "normal" to a "bare" remote repository (and delete all files/folders except for .git)

git init # also restores a bare repository to a working tree


merge two repositories:
http://www.nomachetejuggling.com/2011/09/12/moving-one-git-repo-into-another-as-subdirectory/
(mit git remote add temp) und git fetch

git remote add temp file:///home/my/sub-project

git pull temp master

git remote rm temp



merging:

git merge --no-commit --no-ff <branch>

git mergetool -t kdiff3


branching/master:

git checkout -b <<newbranch>>  # creates and checksout new branch

git branch # lists branches

git checkout master

git checkout <<branchname>>

git branch -m old_branch new_branch #renaming a branch


archiving:

git archive master | tar -c --gzip -f ../my_archive.tar.gz

git archive master | gzip > ../source-tree.tar.gz #  viel besser!!!


tagging:

git tag

git tag -a v1.2 9fceb02


git reset --hard # removes staged and working directory changes

git clean -f -d # remove untracked files

git clean -f -x -d # CAUTION: as this removes ignored files like config.


global/local username (global durch local ersetzen, falls erwünscht):

git config --global user.name "Your Name"

git config --global user.email "you@example.com"


change git author names:

git filter-branch -f --env-filter "GIT_AUTHOR_NAME='Thomas Meschede'; GIT_AUTHOR_EMAIL='Thomas.Meschede@ilr.tu-berlin.de'; GIT_COMMITTER_NAME='Thomas Meschede'; GIT_COMMITTER_EMAIL='Thomas.Meschede@ilr.tu-berlin.de';" HEAD


change specific author name:

git filter-branch --commit-filter '

        if [ "$GIT_COMMITTER_NAME" = "Erik Svensson" ];

        then

                GIT_COMMITTER_NAME="Thomas Meschede";

                GIT_AUTHOR_NAME="Thomas Meschede";

                GIT_COMMITTER_EMAIL="Thomas.Meschede@ilr.tu-berlin.de";

                GIT_AUTHOR_EMAIL="Thomas.Meschede@ilr.tu-berlin.de";

                git commit-tree "$@";

        else

                git commit-tree "$@";

        fi' HEAD


remove ref/original:

git update-ref -d refs/original/heads/master

remove all refs:

git for-each-ref --format="%(refname)" refs/original/ | xargs -n 1 git update-ref -d

falls nicht alle refs löschbar, dann verhindern möglicherweise tags das löschen?